// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(cuid())
  name       String?
  email      String?    @unique
  password   String?
  avatarUrl  String?
  bio        String?
  location   String?
  website    String?
  company    String?
  timezone   String?    @default("America/Los_Angeles")
  language   String?    @default("en")
  projects   Project[]
  tasks      Task[]
  activities Activity[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  Comment    Comment[]
}

model Project {
  id          String     @id @default(cuid())
  name        String
  description String?
  status      String     @default("active")
  color       String?
  startDate   DateTime?
  endDate     DateTime?
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks       Task[]
  activities  Activity[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      String     @default("todo")
  priority    String     @default("medium")
  dueDate     DateTime?
  position    Int?
  projectId   String
  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  activities  Activity[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Comment     Comment[]
}

model Activity {
  id        String   @id @default(cuid())
  action    String
  details   String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  taskId    String?
  task      Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}
